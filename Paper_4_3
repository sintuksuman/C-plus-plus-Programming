Q3. Find the minimum distance between two numbers.

Given an unsorted array arr[] and two numbers x and y, find the minimum distance between x and y in arr[]. The array might also contain duplicates. You may assume that both x and y are different and present in arr[].

Input: arr[] = {1, 2}, x = 1, y = 2 
Output: Minimum distance between 1 and 2 is 1. 
Explanation: 1 is at index 0 and 2 is at index 1, so the distance is 1 

Input: arr[] = {3, 4, 5}, x = 3, y = 5 
Output: Minimum distance between 3 and 5 is 2. 
Explanation:3 is at index 0 and 5 is at index 2, so the distance is 2 

Input: arr[] = {3, 5, 4, 2, 6, 5, 6, 6, 5, 4, 8, 3}, x = 3, y = 6 
Output: Minimum distance between 3 and 6 is 4. 
Explanation:3 is at index 0 and 6 is at index 5, so the distance is 4 

Input: arr[] = {2, 5, 3, 5, 4, 4, 2, 3}, x = 3, y = 2 
Output: Minimum distance between 3 and 2 is 1. 
Explanation:3 is at index 7 and 2 is at index 6, so 





#include<iostream>
#include<vector>                                                                                                                                                                                                                       
#include<math.h>
using namespace std;



   
int main() {
	int n;
	cin>>n;
	vector<int> nums;
	int k;
	for(int i=0;i<n;i++){
		cin>>k;
		nums.push_back(k);
	}
	int x,y,i=0;
	cin>>x>>y;
	int xp=0,yp=0;
	
	while(xp==0||yp==0){
		if(nums[i]==x){
			xp=i+1;
		}
		if(nums[i]==y){
			yp=i+1;
		}
		
		i++;
	}
	
	cout<<abs(xp-yp);

   
  
	return 0;
}
