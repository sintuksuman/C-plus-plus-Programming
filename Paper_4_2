Q2. Find duplicates in O(n) time and O(1) extra space.

Given an array of n elements that contains elements from 0 to n-1, with any of these numbers appearing any number of times. Find these repeating numbers in O(n) and using only constant memory space.

Input : n = 7 and array[] = {1, 2, 3, 6, 3, 6, 1} 
Output: 1, 3, 6 
Explanation: The numbers 1 , 3 and 6 appear more than once in the array. 

Input : n = 5 and array[] = {1, 2, 3, 4 ,3} 
Output: 3 
Explanation: The number 3 appears more than once in the array.




#include<iostream>
#include<vector>                                                                                                                                                                                                                       
#include<math.h>
#include<algorithm>
using namespace std;



   
int main() {
	int n;
	cin>>n;

	vector<int> nums;
	int x;
	
	
	for(int i=0;i<n;i++){
		cin>>x;
		nums.push_back(x);
	}

   
    sort(nums.begin(),nums.end());
   
    vector<int> res; 
         
         
    for(int i = 0; i < nums.size(); i++){
    	
        int index = abs(nums[i]) - 1;
        nums[index] = - nums[index];
        if(nums[index] > 0){
            res.push_back(abs(nums[i]));
        }
        
    }
    
	int len=res.size(); 

	for(int i=0;i<len;i++){
	
		cout<<res[i];
		   if(i!=len-1){
		cout<<", ";
	}

	
 

	}

		
	return 0;
}
