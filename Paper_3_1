Paper - 3


Q1. Union and Intersection of two sorted arrays.

Given two sorted arrays, find their union and intersection.

Input : arr1[] = {1, 3, 4, 5, 7} arr2[] = {2, 3, 5, 6} 
Output :
Union : {1, 2, 3, 4, 5, 6, 7} 
Intersection : {3, 5} 

Input : arr1[] = {2, 5, 6} arr2[] = {4, 6, 8, 10} 
Output : 
Union : {2, 4, 5, 6, 8, 10} 
Intersection : {6}









#include <iostream> 
#include <algorithm> 
using namespace std; 
  
int binary_search(int arr[], int l, int r, int x); 
  
 
void print_union(int arr1[], int arr2[], int m, int n) 
{ 
    
    if (m > n) 
    { 
        int *tempp = arr1; 
        arr1 = arr2; 
        arr2 = tempp; 
  
        int temp = m; 
        m = n; 
        n = temp; 
    } 
  
     
    sort(arr1, arr1 + m); 
    for (int i=0; i<m; i++) 
        cout << arr1[i] << " "; 
  
    
    for (int i=0; i<n; i++) 
        if (binary_search(arr1, 0, m-1, arr2[i]) == -1) 
            cout << arr2[i] << " "; 
} 
  

void print_intersection(int arr1[], int arr2[], int m, int n) 
{ 
    
    if (m > n) 
    { 
        int *tempp = arr1; 
        arr1 = arr2; 
        arr2 = tempp; 
  
        int temp = m; 
        m = n; 
        n = temp; 
    } 
  
     
  
   
    sort(arr1, arr1 + m); 
  
    
    for (int i=0; i<n; i++) 
        if (binary_search(arr1, 0, m-1, arr2[i]) != -1) 
            cout << arr2[i] << " "; 
} 
  
 
int binary_search(int arr[], int l, int r, int x) 
{ 
    if (r >= l) 
    { 
        int mid = l + (r - l)/2; 
  
        
        if (arr[mid] == x)  return mid; 
  
        
        if (arr[mid] > x)  
          return binary_search(arr, l, mid-1, x); 
  
        
        return binary_search(arr, mid+1, r, x); 
    } 
  
     
    return -1; 
} 
  
int main()
{ 
    int arr1[] = {1, 3, 4, 5, 7}; 
    int arr2[] = {2, 3, 5, 6}; 
    int m = sizeof(arr1)/sizeof(arr1[0]); 
    int n = sizeof(arr2)/sizeof(arr2[0]); 
    cout << "Union of two arrays is \t"; 
    print_union(arr1, arr2, m, n); 
    cout << "\nIntersection of two arrays is \t"; 
    print_intersection(arr1, arr2, m, n); 
    return 0; 
} 
